# source this from .bashrc

# Put your fun stuff here.
alias ls='ls --color=auto'
alias ll='ls -l --color=auto'
alias la='ls -a --color=auto'
alias lla='ls -la --color=auto'
alias l.='ls -d .* --color=auto'

alias termbin='nc termbin.com 9999'
if [ ! -e .Xauthority ]; then
	exit
fi

bold=$(tput bold)
normal=$(tput sgr0)

echo ${bold}Update Script:${normal}
if [ -e ~/.updatescript ]; then
	source ~/.updatescript
	LAST_UPDATE="$(stat ~/.updatescript -c %X)"
	THIS_UPDATE="$(date +%s)"
	if [ ${LAST_UPDATE} -lt $(( ${THIS_UPDATE} - $(( 60 * 60 * 24 )) )) ]; then
		update_me
		touch ~/.updatescript
	else
		check_update
	fi
else
	echo "You have no .updatescript"
fi

echo

# the GIT TRACKER! it wont run more than every 4 hours or if you mess with .gitdirectories (since it stores the time it last run as a line)
# need to check directories to see if there is stuff i'm not tracking
echo ${bold}Git:${normal}
if [ -e ~/.gitdirectories ]; then
	LAST_DATE="`tail -1 ~/.gitdirectories | head -1`"
	THIS_DATE="`date +%s`"
	RUNIT=false
	case ${LAST_DATE} in
    ''|*[!0-9]*) 
			RUNIT=true
			;;
    *) 
			if [ ${LAST_DATE} -lt $(( ${THIS_DATE} - $(( 60 * 60 * 4 )) )) ]; then
				RUNIT=TRUE
				sed -i '$ d' ~/.gitdirectories
			fi
			;;
	esac
	if [ ${RUNIT} = "true" ]; then
		while read pathname; do
			case ${pathname} in
				''|*[!0-9]*) 
					GIT_ERROR_LINE=""
					GIT_OUTPUT_LINE=""
					GIT_NAME_LINE="${bold}$(basename ${pathname}): ${normal}"
					GIT_LOG_LINE=""
					GIT_STATUS_LINE=""
					NO_UPSTREAM=false	
					while read i
					do
						tempvar="$(echo "$i," | xargs | awk -F "->" '{print $2}' | cut -d "/" -f 2)"
						GIT_ERROR_LINE_TEMP+="$(echo "$i" 2>&1 | grep -E '(Fatal|fatal|error|Error|Warning|warning)')"
						if [ -n "$(echo "${GIT_ERROR_LINE_TEMP}" 2>&1 | grep -ve "no upstream")" ]
						then
							GIT_ERROR_LINE+="$GIT_ERROR_LINE_TEMP"'\n'
							GIT_ERROR_LINE_TEMP=""
						elif [ -n "${GIT_ERROR_LINE_TEMP}" ]
						then
							NO_UPSTREAM=true
						fi
						if [ -n "${tempvar}" ]; then
							GIT_OUTPUT_LINE+="$tempvar "
						fi
					done <<< "$(git -C "${pathname}" fetch --all 2>&1)"


					if [ -n "${GIT_OUTPUT_LINE}" -o -n "${GIT_ERROR_LINE}" -o -n "$(git -C "${pathname}" --no-pager log HEAD..@{upstream} --oneline 2> /dev/null )" -o -n "$(git -C "${pathname}" status -s 2>/dev/null )" ]; then
						if [ -z "${GIT_OUTPUT_LINE}" ]; then
							GIT_NAME_LINE+='\n'
						fi
						echo -en "$GIT_NAME_LINE"
						echo -en "$GIT_OUTPUT_LINE"
						echo -en "$GIT_ERROR_LINE"
						( ! $NO_UPSTREAM ) && git -C "${pathname}" --no-pager log HEAD..@{upstream} --oneline
						git -C "${pathname}" status -s
					fi
					;;
				*) 
					echo "HEY, YOU HAVE TIMESTAMP IN THE MIDDLE OF YOUR FILE"
					;;
			esac
		done < ~/.gitdirectories
		echo "${THIS_DATE}" >> ~/.gitdirectories
	else
		echo "not ready to fetch"
		# should still status here
	fi
else
	if [ "$GIT_PROLOGUE" = "no" ]; then
		echo "Git Prologue set to \"no\""
	else
		echo "Look at .bashrc_prologue!"
		echo "Comment these lines in .bashrc_prologue if you don't want the git feature."
		echo "Set git config --global credential.helper store"
		echo "Set git config --global credential.helper \'cache --timeout 7200\'"
		echo "Timeout doesn't work that well for me"
		echo "And create a .gitdirectories file (I used find . -name .git)"
		echo "Or... set GIT_PROLOGUE=\"no\" in .bashrc"
	fi
fi

echo

echo ${bold}Todo:${normal}
# this will track changes to your home directory, pesky programs creating messy hidden files. Die in a fire!
# use this to create a todo list for yourself
cat ~/.user_messages 2> /dev/null
echo 

#column  <( tree -L 2 -I Downloads ) <( \
if [ -e $HOME/my_projects/ledge/basic_commands ]; then
	echo ${bold}Finance:${normal}
	$HOME/my_projects/ledge/basic_commands
fi #\
#	) 
echo 

echo ${bold}Tree:${normal}
tree -L 2 -I Downloads --noreport

echo


echo ${bold}File:${normal}
# this will track changes to your home directory, pesky programs creating messy hidden files. Die in a fire!
ls -a1 ~ | diff .directory_last -
echo -e "`ls -a1 ~`" > .directory_last

echo

echo ${bold}Tmux:${normal}
tmux ls 2> /dev/null

echo
echo ${bold}ServerCheck:${normal}
if [ -e ~/.serverscript ]; then
	source ~/.serverscript
	LAST_UPDATE="$(stat ~/.serverscript -c %X)"
	THIS_UPDATE="$(date +%s)"
	if [ ${LAST_UPDATE} -lt $(( ${THIS_UPDATE} - $(( 60 * 60 * 12 )) )) ]; then
		connect_list
		touch ~/.serverscript
	else
		check_connect
	fi
else
	echo "You have no .serverscript"
fi

if [ -e ~/my_projects/analytics_api/HelloAnalytics.py ]; then
	echo
	echo ${bold}Websites:${normal}
	python ~/my_projects/analytics_api/HelloAnalytics.py
fi

echo
echo "Check your logs for... I don't know. Figure it out. Then automate it here"
